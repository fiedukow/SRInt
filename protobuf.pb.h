// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf.proto

#ifndef PROTOBUF_protobuf_2eproto__INCLUDED
#define PROTOBUF_protobuf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2eproto();
void protobuf_AssignDesc_protobuf_2eproto();
void protobuf_ShutdownFile_protobuf_2eproto();

class Message;
class Message_Election;
class Message_State;
class Message_NodeDescription;
class Message_Variable;

enum Message_MessageType {
  Message_MessageType_STATE = 0,
  Message_MessageType_ELECTION = 1,
  Message_MessageType_ENTRY_REQUEST = 2
};
bool Message_MessageType_IsValid(int value);
const Message_MessageType Message_MessageType_MessageType_MIN = Message_MessageType_STATE;
const Message_MessageType Message_MessageType_MessageType_MAX = Message_MessageType_ENTRY_REQUEST;
const int Message_MessageType_MessageType_ARRAYSIZE = Message_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor();
inline const ::std::string& Message_MessageType_Name(Message_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_MessageType_descriptor(), value);
}
inline bool Message_MessageType_Parse(
    const ::std::string& name, Message_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_MessageType>(
    Message_MessageType_descriptor(), name, value);
}
// ===================================================================

class Message_Election : public ::google::protobuf::Message {
 public:
  Message_Election();
  virtual ~Message_Election();

  Message_Election(const Message_Election& from);

  inline Message_Election& operator=(const Message_Election& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Election& default_instance();

  void Swap(Message_Election* other);

  // implements Message ----------------------------------------------

  Message_Election* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Election& from);
  void MergeFrom(const Message_Election& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // required int32 state_id = 2;
  inline bool has_state_id() const;
  inline void clear_state_id();
  static const int kStateIdFieldNumber = 2;
  inline ::google::protobuf::int32 state_id() const;
  inline void set_state_id(::google::protobuf::int32 value);

  // required int32 node_id = 3;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.Election)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_state_id();
  inline void clear_has_state_id();
  inline void set_has_node_id();
  inline void clear_has_node_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 state_id_;
  ::google::protobuf::int32 node_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2eproto();
  friend void protobuf_AssignDesc_protobuf_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2eproto();

  void InitAsDefaultInstance();
  static Message_Election* default_instance_;
};
// -------------------------------------------------------------------

class Message_State : public ::google::protobuf::Message {
 public:
  Message_State();
  virtual ~Message_State();

  Message_State(const Message_State& from);

  inline Message_State& operator=(const Message_State& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_State& default_instance();

  void Swap(Message_State* other);

  // implements Message ----------------------------------------------

  Message_State* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_State& from);
  void MergeFrom(const Message_State& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 state_id = 1;
  inline bool has_state_id() const;
  inline void clear_state_id();
  static const int kStateIdFieldNumber = 1;
  inline ::google::protobuf::int64 state_id() const;
  inline void set_state_id(::google::protobuf::int64 value);

  // repeated .Message.NodeDescription nodes = 2;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 2;
  inline const ::Message_NodeDescription& nodes(int index) const;
  inline ::Message_NodeDescription* mutable_nodes(int index);
  inline ::Message_NodeDescription* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription >*
      mutable_nodes();

  // repeated .Message.Variable variables = 3;
  inline int variables_size() const;
  inline void clear_variables();
  static const int kVariablesFieldNumber = 3;
  inline const ::Message_Variable& variables(int index) const;
  inline ::Message_Variable* mutable_variables(int index);
  inline ::Message_Variable* add_variables();
  inline const ::google::protobuf::RepeatedPtrField< ::Message_Variable >&
      variables() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message_Variable >*
      mutable_variables();

  // @@protoc_insertion_point(class_scope:Message.State)
 private:
  inline void set_has_state_id();
  inline void clear_has_state_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 state_id_;
  ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription > nodes_;
  ::google::protobuf::RepeatedPtrField< ::Message_Variable > variables_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2eproto();
  friend void protobuf_AssignDesc_protobuf_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2eproto();

  void InitAsDefaultInstance();
  static Message_State* default_instance_;
};
// -------------------------------------------------------------------

class Message_NodeDescription : public ::google::protobuf::Message {
 public:
  Message_NodeDescription();
  virtual ~Message_NodeDescription();

  Message_NodeDescription(const Message_NodeDescription& from);

  inline Message_NodeDescription& operator=(const Message_NodeDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_NodeDescription& default_instance();

  void Swap(Message_NodeDescription* other);

  // implements Message ----------------------------------------------

  Message_NodeDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_NodeDescription& from);
  void MergeFrom(const Message_NodeDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 node_id = 3;
  inline bool has_node_id() const;
  inline void clear_node_id();
  static const int kNodeIdFieldNumber = 3;
  inline ::google::protobuf::int32 node_id() const;
  inline void set_node_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Message.NodeDescription)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_node_id();
  inline void clear_has_node_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 node_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2eproto();
  friend void protobuf_AssignDesc_protobuf_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2eproto();

  void InitAsDefaultInstance();
  static Message_NodeDescription* default_instance_;
};
// -------------------------------------------------------------------

class Message_Variable : public ::google::protobuf::Message {
 public:
  Message_Variable();
  virtual ~Message_Variable();

  Message_Variable(const Message_Variable& from);

  inline Message_Variable& operator=(const Message_Variable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Variable& default_instance();

  void Swap(Message_Variable* other);

  // implements Message ----------------------------------------------

  Message_Variable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Variable& from);
  void MergeFrom(const Message_Variable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // repeated .Message.NodeDescription owners = 4;
  inline int owners_size() const;
  inline void clear_owners();
  static const int kOwnersFieldNumber = 4;
  inline const ::Message_NodeDescription& owners(int index) const;
  inline ::Message_NodeDescription* mutable_owners(int index);
  inline ::Message_NodeDescription* add_owners();
  inline const ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription >&
      owners() const;
  inline ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription >*
      mutable_owners();

  // @@protoc_insertion_point(class_scope:Message.Variable)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription > owners_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2eproto();
  friend void protobuf_AssignDesc_protobuf_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2eproto();

  void InitAsDefaultInstance();
  static Message_Variable* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_Election Election;
  typedef Message_State State;
  typedef Message_NodeDescription NodeDescription;
  typedef Message_Variable Variable;

  typedef Message_MessageType MessageType;
  static const MessageType STATE = Message_MessageType_STATE;
  static const MessageType ELECTION = Message_MessageType_ELECTION;
  static const MessageType ENTRY_REQUEST = Message_MessageType_ENTRY_REQUEST;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Message_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Message_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Message_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Message_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Message.MessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Message_MessageType type() const;
  inline void set_type(::Message_MessageType value);

  // optional .Message.Election election_content = 2;
  inline bool has_election_content() const;
  inline void clear_election_content();
  static const int kElectionContentFieldNumber = 2;
  inline const ::Message_Election& election_content() const;
  inline ::Message_Election* mutable_election_content();
  inline ::Message_Election* release_election_content();
  inline void set_allocated_election_content(::Message_Election* election_content);

  // optional .Message.State state_content = 3;
  inline bool has_state_content() const;
  inline void clear_state_content();
  static const int kStateContentFieldNumber = 3;
  inline const ::Message_State& state_content() const;
  inline ::Message_State* mutable_state_content();
  inline ::Message_State* release_state_content();
  inline void set_allocated_state_content(::Message_State* state_content);

  // @@protoc_insertion_point(class_scope:Message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_election_content();
  inline void clear_has_election_content();
  inline void set_has_state_content();
  inline void clear_has_state_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Message_Election* election_content_;
  ::Message_State* state_content_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2eproto();
  friend void protobuf_AssignDesc_protobuf_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Message_Election

// required int64 timestamp = 1;
inline bool Message_Election::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Election::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Election::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Election::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 Message_Election::timestamp() const {
  return timestamp_;
}
inline void Message_Election::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required int32 state_id = 2;
inline bool Message_Election::has_state_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Election::set_has_state_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Election::clear_has_state_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Election::clear_state_id() {
  state_id_ = 0;
  clear_has_state_id();
}
inline ::google::protobuf::int32 Message_Election::state_id() const {
  return state_id_;
}
inline void Message_Election::set_state_id(::google::protobuf::int32 value) {
  set_has_state_id();
  state_id_ = value;
}

// required int32 node_id = 3;
inline bool Message_Election::has_node_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_Election::set_has_node_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_Election::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_Election::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 Message_Election::node_id() const {
  return node_id_;
}
inline void Message_Election::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
}

// -------------------------------------------------------------------

// Message_State

// required int64 state_id = 1;
inline bool Message_State::has_state_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_State::set_has_state_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_State::clear_has_state_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_State::clear_state_id() {
  state_id_ = GOOGLE_LONGLONG(0);
  clear_has_state_id();
}
inline ::google::protobuf::int64 Message_State::state_id() const {
  return state_id_;
}
inline void Message_State::set_state_id(::google::protobuf::int64 value) {
  set_has_state_id();
  state_id_ = value;
}

// repeated .Message.NodeDescription nodes = 2;
inline int Message_State::nodes_size() const {
  return nodes_.size();
}
inline void Message_State::clear_nodes() {
  nodes_.Clear();
}
inline const ::Message_NodeDescription& Message_State::nodes(int index) const {
  return nodes_.Get(index);
}
inline ::Message_NodeDescription* Message_State::mutable_nodes(int index) {
  return nodes_.Mutable(index);
}
inline ::Message_NodeDescription* Message_State::add_nodes() {
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription >&
Message_State::nodes() const {
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription >*
Message_State::mutable_nodes() {
  return &nodes_;
}

// repeated .Message.Variable variables = 3;
inline int Message_State::variables_size() const {
  return variables_.size();
}
inline void Message_State::clear_variables() {
  variables_.Clear();
}
inline const ::Message_Variable& Message_State::variables(int index) const {
  return variables_.Get(index);
}
inline ::Message_Variable* Message_State::mutable_variables(int index) {
  return variables_.Mutable(index);
}
inline ::Message_Variable* Message_State::add_variables() {
  return variables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message_Variable >&
Message_State::variables() const {
  return variables_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message_Variable >*
Message_State::mutable_variables() {
  return &variables_;
}

// -------------------------------------------------------------------

// Message_NodeDescription

// required string ip = 1;
inline bool Message_NodeDescription::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_NodeDescription::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_NodeDescription::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_NodeDescription::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Message_NodeDescription::ip() const {
  return *ip_;
}
inline void Message_NodeDescription::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Message_NodeDescription::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Message_NodeDescription::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message_NodeDescription::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Message_NodeDescription::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message_NodeDescription::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool Message_NodeDescription::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_NodeDescription::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_NodeDescription::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_NodeDescription::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Message_NodeDescription::port() const {
  return port_;
}
inline void Message_NodeDescription::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required int32 node_id = 3;
inline bool Message_NodeDescription::has_node_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_NodeDescription::set_has_node_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_NodeDescription::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_NodeDescription::clear_node_id() {
  node_id_ = 0;
  clear_has_node_id();
}
inline ::google::protobuf::int32 Message_NodeDescription::node_id() const {
  return node_id_;
}
inline void Message_NodeDescription::set_node_id(::google::protobuf::int32 value) {
  set_has_node_id();
  node_id_ = value;
}

// -------------------------------------------------------------------

// Message_Variable

// required string name = 1;
inline bool Message_Variable::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Variable::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Variable::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Variable::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Message_Variable::name() const {
  return *name_;
}
inline void Message_Variable::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Message_Variable::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Message_Variable::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message_Variable::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Message_Variable::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message_Variable::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 value = 2;
inline bool Message_Variable::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Variable::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Variable::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Variable::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 Message_Variable::value() const {
  return value_;
}
inline void Message_Variable::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// repeated .Message.NodeDescription owners = 4;
inline int Message_Variable::owners_size() const {
  return owners_.size();
}
inline void Message_Variable::clear_owners() {
  owners_.Clear();
}
inline const ::Message_NodeDescription& Message_Variable::owners(int index) const {
  return owners_.Get(index);
}
inline ::Message_NodeDescription* Message_Variable::mutable_owners(int index) {
  return owners_.Mutable(index);
}
inline ::Message_NodeDescription* Message_Variable::add_owners() {
  return owners_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription >&
Message_Variable::owners() const {
  return owners_;
}
inline ::google::protobuf::RepeatedPtrField< ::Message_NodeDescription >*
Message_Variable::mutable_owners() {
  return &owners_;
}

// -------------------------------------------------------------------

// Message

// required .Message.MessageType type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Message_MessageType Message::type() const {
  return static_cast< ::Message_MessageType >(type_);
}
inline void Message::set_type(::Message_MessageType value) {
  assert(::Message_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .Message.Election election_content = 2;
inline bool Message::has_election_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_election_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_election_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_election_content() {
  if (election_content_ != NULL) election_content_->::Message_Election::Clear();
  clear_has_election_content();
}
inline const ::Message_Election& Message::election_content() const {
  return election_content_ != NULL ? *election_content_ : *default_instance_->election_content_;
}
inline ::Message_Election* Message::mutable_election_content() {
  set_has_election_content();
  if (election_content_ == NULL) election_content_ = new ::Message_Election;
  return election_content_;
}
inline ::Message_Election* Message::release_election_content() {
  clear_has_election_content();
  ::Message_Election* temp = election_content_;
  election_content_ = NULL;
  return temp;
}
inline void Message::set_allocated_election_content(::Message_Election* election_content) {
  delete election_content_;
  election_content_ = election_content;
  if (election_content) {
    set_has_election_content();
  } else {
    clear_has_election_content();
  }
}

// optional .Message.State state_content = 3;
inline bool Message::has_state_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_state_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_state_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_state_content() {
  if (state_content_ != NULL) state_content_->::Message_State::Clear();
  clear_has_state_content();
}
inline const ::Message_State& Message::state_content() const {
  return state_content_ != NULL ? *state_content_ : *default_instance_->state_content_;
}
inline ::Message_State* Message::mutable_state_content() {
  set_has_state_content();
  if (state_content_ == NULL) state_content_ = new ::Message_State;
  return state_content_;
}
inline ::Message_State* Message::release_state_content() {
  clear_has_state_content();
  ::Message_State* temp = state_content_;
  state_content_ = NULL;
  return temp;
}
inline void Message::set_allocated_state_content(::Message_State* state_content) {
  delete state_content_;
  state_content_ = state_content;
  if (state_content) {
    set_has_state_content();
  } else {
    clear_has_state_content();
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message_MessageType>() {
  return ::Message_MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2eproto__INCLUDED
